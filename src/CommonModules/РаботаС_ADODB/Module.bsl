#Область ПрограммныйИнтерфейс

Функция ПараметрыСоединения() Экспорт
	_ПараметрыСоединения = Новый Структура;
	_ПараметрыСоединения.Вставить("ТипСУБД", "SQLServer");
	_ПараметрыСоединения.Вставить("Сервер", "");
	_ПараметрыСоединения.Вставить("ИмяБазыДанных", "");
	_ПараметрыСоединения.Вставить("ИмяПользователя", "");
	_ПараметрыСоединения.Вставить("Пароль", "");
	_ПараметрыСоединения.Вставить("АутентификацияNTLM", Истина);
	_ПараметрыСоединения.Вставить("Схема", "");
	_ПараметрыСоединения.Вставить("Схема1С", "");
	Возврат _ПараметрыСоединения;
КонецФункции

Функция Соединение(Знач ПараметрыСоединенияИлиТипСУБД = "SQLServer", Знач ИмяСервера = Неопределено, Знач ИмяБД = Неопределено, Знач Пользователь = "", Знач Пароль = "", Знач АутентификацияNTLM = Ложь) Экспорт
	Перем ТипСУБД;
	Если ТипЗнч(ПараметрыСоединенияИлиТипСУБД) = Тип("Структура") Тогда
		ПараметрыСоединенияИлиТипСУБД.Свойство("ТипСУБД", ТипСУБД);
		ПараметрыСоединенияИлиТипСУБД.Свойство("Сервер", ИмяСервера);
		ПараметрыСоединенияИлиТипСУБД.Свойство("ИмяБазыДанных", ИмяБД);
		ПараметрыСоединенияИлиТипСУБД.Свойство("ИмяПользователя", Пользователь);
		ПараметрыСоединенияИлиТипСУБД.Свойство("Пароль", Пароль);
		ПараметрыСоединенияИлиТипСУБД.Свойство("АутентификацияNTLM", АутентификацияNTLM);
	Иначе
		ТипСУБД = ПараметрыСоединенияИлиТипСУБД;
	КонецЕсли;
	СоединениеADODB = Новый COMОбъект("ADODB.Connection");
	Если ТипСУБД = "SQLServer" Тогда
		Если АутентификацияNTLM Тогда
			СтрокаСоединения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;"
				+ "Persist Security Info=False;"
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
		Иначе	
			СтрокаСоединения = "Provider=SQLOLEDB.1;Password=" + Пароль + ";"
				+ "Persist Security Info=True;User ID=" + Пользователь + ";" 
				+ "Initial Catalog=" + ИмяБД + ";"
				+ "Data Source=" + ИмяСервера;
		КонецЕсли;
	ИначеЕсли ТипСУБД = "PostgreSQL" Тогда
		СтрокаСоединения = "Driver={PostgreSQL Unicode};Pwd=" + Пароль + ";"
			+ "Uid=" + Пользователь + ";"
			+ "Database=" + ИмяБД + ";"
			+ "Server=" + ИмяСервера;
	КонецЕсли;
	Попытка
	    СоединениеADODB.Open(СтрокаСоединения);
		СоединениеADODB.CommandTimeout = 0;
		Возврат СоединениеADODB;
	Исключение
		СообщениеОбОшибке = ТипСУБД 
			+ ": Ошибка установки соединения: " 
			+ Символы.ПС 
			+ ОписаниеОшибки();
		Сообщить(СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Процедура ЗакрытьСоединение(СоединениеADODB) Экспорт
	Если СоединениеADODB = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		СоединениеADODB.Close();
	Исключение
		// Действий не требуется	
	КонецПопытки;
	СоединениеADODB = Неопределено;
КонецПроцедуры

// Конвертирует строковое значение ссылки 1С в бинарный формат хранения
// '9299c542-7d64-11e1-8dde-000c2989577c'  -> 0x8DDE000C2989577C11E17D649299C542
Функция HexToBin(Знач Строка) Экспорт
	Строка = ВРег(Строка);
	Результат = "0x"
		+ Сред(Строка, 20, 4)
		+ Сред(Строка, 25, 12)
		+ Сред(Строка, 15, 4)
		+ Сред(Строка, 10, 4)
		+ Сред(Строка, 1, 8)
	;
	Возврат Результат;
КонецФункции

// Конвертирует значение ссылки 1С из бинарного формата в строку
// 0x8DDE000C2989577C11E17D649299C542 -> '9299c542-7d64-11e1-8dde-000c2989577c'
Функция BinToHex(Знач Строка) Экспорт
	Строка = Сред(Строка, 3, 32);
	Результат = Сред(Строка, 25, 8)
		+ "-" + Сред(Строка, 21, 4)
		+ "-" + Сред(Строка, 17, 4)
		+ "-" + Сред(Строка, 1, 4)
		+ "-" + Сред(Строка, 5, 12)
	;
	Возврат Результат;
КонецФункции

//  Используется оптимизированный алгоритм преобразования из десятичной системы байтов в HEX представление.
// Алгоритм взят из https://infostart.ru/public/549333/
Функция COMSafeArrayВСтроку(МассивДанных, МассивHEX = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(МассивHEX) Тогда
		МассивШестнадцатиричныхЗначений = Новый Массив(256);
		Словарь = "0123456789ABCDEF";
		Для СтаршийБайт = 0 По 15 Цикл
			Для МладшийБайт = 0 По 15 Цикл
				МассивШестнадцатиричныхЗначений[СтаршийБайт * 16 + МладшийБайт] = Сред(Словарь, СтаршийБайт + 1, 1) + Сред(Словарь, МладшийБайт + 1, 1)
			КонецЦикла;
		КонецЦикла;
		МассивHEX = Новый ФиксированныйМассив(МассивШестнадцатиричныхЗначений);
	КонецЕсли;
	Строки = Новый Массив;
	Строки.Добавить("0x");
	Для Каждого Байт Из МассивДанных Цикл
		Строки.Добавить(МассивHEX[Байт]);
	КонецЦикла;
	Возврат СтрСоединить(Строки);
КонецФункции

Функция ПрочитатьНаборЗаписей(НаборЗаписей, СмещениеДат2000)
	Перем МассивHEX;
	Если НаборЗаписей = Неопределено ИЛИ НаборЗаписей.Fields.Count = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Таблица = Новый Структура("Колонки, Строки", Новый Массив, Новый Массив);
	Колонки = Таблица.Колонки;
	ТипыКолонок = Новый Соответствие;
	Для НомерКолонки = 0 По НаборЗаписей.Fields.Count - 1 Цикл
		Поле = НаборЗаписей.Fields(НомерКолонки);// Name, Value
		Type = Поле.Type;// https://learn.microsoft.com/ru-RU/sql/ado/reference/ado-api/datatypeenum
		Если Type = 200 Тогда // Указывает строковое значение
			ОписаниеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.DefinedSize));
			ТипКолонкиСтрокой = СтрШаблон("СТРОКА(%1)", Формат(Поле.DefinedSize, "ЧГ="));
		ИначеЕсли Type = 72 Тогда // Указывает глобальный уникальный идентификатор (GUID) (DBTYPE_GUID)
			ОписаниеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
			ТипКолонкиСтрокой = "СТРОКА(50)";
		ИначеЕсли Type = 135 Тогда // Указывает метку даты и времени (yymmddhhmmss плюс дробь в миллиардах)
			ОписаниеТипа = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			ТипКолонкиСтрокой = "ДАТА";
		ИначеЕсли Type = 202 Тогда // Указывает символьную строку Юникода, завершаемую значением NULL
			ОписаниеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.DefinedSize));
			ТипКолонкиСтрокой = СтрШаблон("СТРОКА(%1)", Формат(Поле.DefinedSize, "ЧГ="));
		ИначеЕсли Type = 131 Тогда // Указывает точное числовое значение с фиксированной точностью и масштабом
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Precision, Поле.NumericScale));
			ТипКолонкиСтрокой = СтрШаблон("ЧИСЛО(%1, %2)", Формат(Поле.Precision, "ЧГ="), Формат(Поле.NumericScale, "ЧГ="));
		ИначеЕсли Type = 3 ИЛИ Type = 20 Тогда // Указывает четырехбайтовое целое число со знаком, Указывает восьмибайтовое целое число со знаком 
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Precision));
			ТипКолонкиСтрокой = СтрШаблон("ЧИСЛО(%1)", Формат(Поле.Precision, "ЧГ="));
		ИначеЕсли Type = 17 Тогда // Указывает однобайтовое целое число без знака
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Precision));
			ТипКолонкиСтрокой = СтрШаблон("ЧИСЛО(%1)", Формат(Поле.Precision, "ЧГ="));
		ИначеЕсли Type = 6 Тогда // Указывает значение валюты (DBTYPE_CY). Валюта — это число фиксированной точки с четырьмя цифрами справа от десятичной запятой. Он хранится в восьмибайтовом целом числом со знаком, масштабируемым на 10 000
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Precision, 4));
			ТипКолонкиСтрокой = СтрШаблон("ЧИСЛО(%1, 4)", Формат(Поле.Precision, "ЧГ="));
		ИначеЕсли Type = 5 Тогда // Указывает значение с плавающей запятой двойной точности
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(32, 10));
			ТипКолонкиСтрокой = "ЧИСЛО(32,10)";
		ИначеЕсли Type = 2 Тогда // Указывает двухбайтовое целое число со знаком
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Precision, 0));
			ТипКолонкиСтрокой = СтрШаблон("ЧИСЛО(%1, 0)", Формат(Поле.Precision, "ЧГ="));
		ИначеЕсли Type = 201 Тогда // Указывает длинное строковое значение
			ОписаниеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.NumericScale));
			ТипКолонкиСтрокой = СтрШаблон("СТРОКА(%1)", Формат(Поле.NumericScale, "ЧГ="));
		ИначеЕсли Type = 11 Тогда // Указывает логическое значение
			ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
			ТипКолонкиСтрокой = "ЧИСЛО(1)";
		ИначеЕсли Type = 128 Тогда // Указывает двоичное значение (DBTYPE_BYTES)
			ТипКолонкиСтрокой = СтрШаблон("СТРОКА(%1)", Формат(Поле.DefinedSize * 2 + 2, "ЧГ="));
		Иначе	
			ОписаниеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.DefinedSize));
			ТипКолонкиСтрокой = СтрШаблон("СТРОКА(%1)", Формат(Поле.DefinedSize, "ЧГ="));
		КонецЕсли;	
		Колонки.Добавить(Новый Структура("Имя, ТипЗначения", Поле.Name, ТипКолонкиСтрокой));
		ТипыКолонок[Поле.Name] = ОписаниеТипа;
	КонецЦикла;
	Строки = Таблица.Строки;
	СмещениеДатМесяцев = ?(СмещениеДат2000, 24000, 0);
	Пока НЕ НаборЗаписей.EOF() Цикл
		Значения = Новый Массив;
		Для НомерКолонки = 0 По НаборЗаписей.Fields.Count - 1 Цикл
			Поле = НаборЗаписей.Fields(НомерКолонки);// Name, Value
			Если ТипЗнч(Поле.Value) = Тип("COMSafeArray") Тогда
				Значение = COMSafeArrayВСтроку(Поле.Value, МассивHEX);
			Иначе
				Значение = ТипыКолонок[Поле.Name].ПривестиЗначение(Поле.Value);
			КонецЕсли;
			Значения.Добавить(Значение);
		КонецЦикла;
		Строки.Добавить(Значения);
		НаборЗаписей.MoveNext();
	КонецЦикла;
	Возврат Таблица;
КонецФункции

Функция ВыполнитьПакетЗапросов(СоединениеADODB, ТекстЗапроса, СмещениеДат2000 = Истина) Экспорт
	НаборЗаписей = СоединениеADODB.Execute(ТекстЗапроса);
	ПакетРезультатов = Новый Массив;
	ПакетРезультатов.Добавить(ПрочитатьНаборЗаписей(НаборЗаписей, СмещениеДат2000));
	Пока Истина Цикл
		НаборЗаписей = НаборЗаписей.NextRecordSet();
		Если НаборЗаписей = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ПакетРезультатов.Добавить(ПрочитатьНаборЗаписей(НаборЗаписей, СмещениеДат2000));
	КонецЦикла;
	Возврат ПакетРезультатов;
КонецФункции

Функция ВыполнитьЗапрос(СоединениеADODB, ТекстЗапроса, СмещениеДат2000 = Истина) Экспорт
	ПакетРезультатов = ВыполнитьПакетЗапросов(СоединениеADODB, ТекстЗапроса, СмещениеДат2000 = Истина);
	Возврат ПакетРезультатов[ПакетРезультатов.ВГраница()];
КонецФункции

#КонецОбласти